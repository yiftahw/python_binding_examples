cmake_minimum_required(VERSION 3.16)
project(point_litgen_example LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Find a Python3 interpreter
find_package(Python3 COMPONENTS Interpreter Development REQUIRED)

# use the python3 interpeter to find the pybind11 package cmake module
# this will only work if pybind11 was installed as a python package
# (and not fetched from the git repository)
# an alternative is to use FetchContent() or CPM
execute_process(
    COMMAND "${Python3_EXECUTABLE}" -m pybind11 --cmakedir
    OUTPUT_VARIABLE PYBIND11_CMAKE_DIR
    OUTPUT_STRIP_TRAILING_WHITESPACE
)
list(APPEND CMAKE_PREFIX_PATH "${PYBIND11_CMAKE_DIR}")
set(PYBIND11_FINDPYTHON ON)
find_package(pybind11 CONFIG REQUIRED)

set(MODULE_NAME "geometry2d")
project(${MODULE_NAME} CXX)

# search paths to be passed to the generator script
# this is used both for compiling the generated code and
# for the generated script to drop prefixes from include paths
set(INCLUDE_DIRS 
    ${CMAKE_SOURCE_DIR}
)

# the list to be passed to the generator script, wrapped with -s flags
set(INCLUDE_DIRS_WITH_FLAGS "")
foreach(dir IN LISTS INCLUDE_DIRS)
    list(APPEND INCLUDE_DIRS_WITH_FLAGS -s ${dir})
endforeach()

set(MODULE_HEADERS
    ${CMAKE_SOURCE_DIR}/pose.hpp
    ${CMAKE_SOURCE_DIR}/line.hpp
)
set(AUTOGENERATED_DIR ${CMAKE_BINARY_DIR}/autogenerated)
set(GEN_BINDINGS_SCRIPT ${CMAKE_SOURCE_DIR}/gen_bindings.py)

# run the litgen script to generate bindings
add_custom_target(generate_bindings
    ALL
    COMMAND ${Python3_EXECUTABLE} ${GEN_BINDINGS_SCRIPT} -o ${AUTOGENERATED_DIR} ${INCLUDE_DIRS_WITH_FLAGS} ${MODULE_NAME} ${MODULE_HEADERS}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
    DEPENDS ${GEN_BINDINGS_SCRIPT} ${MODULE_HEADERS}
    COMMENT "Generating C++ bindings using litgen"
)

# Create a pybind11 module from the generated C++ file
pybind11_add_module(${MODULE_NAME} ${AUTOGENERATED_DIR}/${MODULE_NAME}.cpp)
set_source_files_properties(${AUTOGENERATED_DIR}/${MODULE_NAME}.cpp PROPERTIES GENERATED TRUE)
target_include_directories(${MODULE_NAME} PRIVATE ${INCLUDE_DIRS})
add_dependencies(${MODULE_NAME} generate_bindings)

# Ignore the machine, os, compiler suffixes in the output name
# This is fine for local development
set_target_properties(${MODULE_NAME} PROPERTIES
    PREFIX ""
    SUFFIX ".so"
    OUTPUT_NAME "${MODULE_NAME}"
)

add_custom_target(copy_shared_lib_and_stubs
    ALL
    DEPENDS ${MODULE_NAME} generate_bindings
    COMMENT "Copying '.so' and '.pyi' files to the source directory"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different "${CMAKE_BINARY_DIR}/${MODULE_NAME}.so" "${CMAKE_SOURCE_DIR}/${MODULE_NAME}.so"
    COMMAND ${CMAKE_COMMAND} -E copy_if_different "${AUTOGENERATED_DIR}/${MODULE_NAME}.pyi" "${CMAKE_SOURCE_DIR}/${MODULE_NAME}.pyi"
    WORKING_DIRECTORY "${CMAKE_BINARY_DIR}"
    VERBATIM
)
