from typing import List
import litgen

def gen_header(includes: List[str]) -> str:
    """`includes`: list of headers that we bound"""
    header = f"""
#include <pybind11/pybind11.h>
namespace py = pybind11;

{"\n".join([f"#include \"{include}\"" for include in includes])}
"""
    return header.lstrip()


def bindings_wrapper(name: str, includes: List[str], binding_code: str = "", glue_code: str = "") -> str:
    wrapper = f"""
{gen_header(includes)}

// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// <litgen_glue_code>  // Autogenerated code below! Do not edit!

{glue_code}

// </litgen_glue_code> // Autogenerated code end
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

void py_init_module_{name}(py::module& m)
{"{"}
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
    // <litgen_pydef> // Autogenerated code below! Do not edit!

{binding_code}

    // </litgen_pydef> // Autogenerated code end
    // !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!  AUTOGENERATED CODE END !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
{"}"}

PYBIND11_MODULE(geometry2d, m) {"{"}
    py_init_module_geometry2d(m);
{"}"}
"""
    return wrapper.lstrip()


module_name = "geometry2d"
headers = [
    "pose.hpp",
    "line.hpp"
]

bindings = ""
glue_code = ""
stubs = ""
for header in headers:
    options = litgen.LitgenOptions()
    generated_code = litgen.generate_code_for_file(options, header)

    glue_code += generated_code.glue_code + "\n"
    bindings += generated_code.pydef_code + "\n"
    stubs += generated_code.stub_code + "\n"

with open(f"{module_name}.cpp", "w") as bindings_file:
    bindings_file.write(bindings_wrapper(module_name, headers, bindings, glue_code))

with open(f"{module_name}.pyi", "w") as stub_file:
    stub_file.write(stubs)
